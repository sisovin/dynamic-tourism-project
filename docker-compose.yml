version: '3.8'

services:
  backend:
    build:
      context: ./apps/backend
    command: gunicorn --bind 0.0.0.0:8000 my_project.wsgi:application
    volumes:
      - ./apps/backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    networks:
      - app-network

  frontend:
    build:
      context: ./apps/frontend
    command: flutter run -d web-server --web-port 8080
    volumes:
      - ./apps/frontend:/app
    ports:
      - "8080:8080"
    depends_on:
      - backend
    environment:
      - API_URL=http://backend:8000
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    networks:
      - app-network

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: mydatabaseuser
      POSTGRES_PASSWORD: mypassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    networks:
      - app-network

  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    networks:
      - app-network

  nginx:
    image: nginx:latest
    volumes:
      - ./apps/frontend/build/web:/usr/share/nginx/html
      - ./apps/frontend/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - frontend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
